  public int FindNthPrimeNumber(int nthPrime)
        {
            int counter = 2;
            if ((nthPrime <= 0) || (nthPrime.GetType() != typeof(int))) //Validating the input
            {
                Console.WriteLine("Illegal Parameters. Enter a non-negative integer greater than 0");
                return -1;
            }
            else if (nthPrime == 1)  //If value is 1
            {
                return 2;
            }
            else if (nthPrime == 2) //If value is 2
            {
                return 3;
            }
            else                   // For all other values
            {
                for (int i = 4; counter != nthPrime; i++)
                {
                    if (isPrime(i))  //Check if each number is prime
                    {
                        counter++;  //Increase the counter if its prime
                        if (counter == nthPrime)  //If counter matches the input, it means we have arrived at the desired Nth prime number
                        {
                            return i;
                        }
                    }
                }
            }
            return -1;  //covering all paths and returning -1 in case.
            // throw new NotImplementedException();
        }

        public bool isPrime(int n)
        {
            if (n == 2) //Return true for 2 as its the first prime number
            {
                return true;
            }
            else //Check for all other cases
            {
                double root = Math.Sqrt(n);  //Following the approach: If the number is not divisible by any integer till its square root, its a prime number
                if (root < 4)                // Checking for individual divisibilty in case the square root is too small
                {
                    for (int i = 2; i < n; i++)
                    {
                        if (n % i == 0)
                        {
                            return false;   //Return false if at any point its divisible. No need to check further.
                        }
                    }
                }
                else                        //If the square root is greater than 4, only checking divisibilty only till the square root.
                {
                    for (int i = 2; i <= root; i++)
                    {
                        if (n % i == 0)
                        {
                            return false;  //Return false if at any point its divisible. No need to check further.
                        }
                    }
                }
            }
            return true;  //Covering all the paths in case
        }
